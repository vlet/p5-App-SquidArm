#!/usr/bin/perl
use strict;
use warnings;
use Getopt::Long;
use AnyEvent;
use AnyEvent::Log;
use Proc::Daemon;
use App::SquidArm::Server;
use App::SquidArm::Conf;

my $config   = '/etc/squid3/sarm.conf';
my $debug    = '';
my $nodaemon = '';
my $cwd      = undef;

GetOptions(
    "config=s"  => \$config,
    "nodaemon"  => \$nodaemon,
    "workdir=s" => \$cwd,
    "debug"     => \$debug
) or die "Error in command line arguments\n";

my $conf = App::SquidArm::Conf->new( config => $config )->parse;

my $log_level =
    $debug                          ? 'debug'
  : defined $conf->tag('log_level') ? $conf->tag('log_level')
  :                                   'warn';

$AnyEvent::Log::FILTER->level($log_level);
$AnyEvent::Log::LOG->log_to_file( $conf->tag('log_file') )
  if defined $conf->tag('log_file');

# Init daemon process
Proc::Daemon::Init( { defined $cwd ? ( 'work_dir' => $cwd ) : () } )
  unless $nodaemon;

my ( $w, $term, $server, @sig );

$term = sub {
    $w->send();
    $server->stop;
};

$server = App::SquidArm::Server->new(
    on_error => $term,
    %{ $conf->tags }
)->listen();

$w = AE::cv;

push @sig, AE::signal TERM => $term;
push @sig, AE::signal INT  => $term;

push @sig, AE::signal HUP => sub {
    my $newconf =
      eval { App::SquidArm::Conf->new( config => $config )->parse; };
    if ($@) {
        AE::log error => "error while parsing config file. Using old config";
    }
    else {
        $conf = $newconf;
    }
    eval { $server->hup( $conf->tags ); };
    $term->() if $@;
};

$w->recv();
